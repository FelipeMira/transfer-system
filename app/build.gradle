plugins {
    id 'java'
    id 'java-library'
}

ext {
    lombokVersion = '1.18.32'
    springFrameworkVersion = '5.3.13'
    springBootVersion = '3.1.0'
    springBootStarterValidationVersion = '3.1.0'
    junitVersion = '5.9.1'
    junitSuiteVersion = '1.9.1'
    jakartaPersistenceVersion = '3.0.2'
    jakartaValidationVersion = '3.0.2'
    jakartaInjectVersion = '2.0.1'
    jakartaElVersion = '4.0.0'
    glassfishElVersion = '4.0.2'
    hibernateValidationVersion = '7.0.1.Final'
    powerMockVersion = '2.0.9'
    mapstructVersion = '1.4.2.Final'
    lombokVersion = '1.18.22'
    javafxVersion = '17'
    cdiVersion = '2.0'
    jakartaXmlBindVersion = '3.0.1'
    mssqlJdbcVersion = '9.4.1.jre11'
    mavenShadePluginVersion = '3.2.4'
    springfoxVersion = '3.0.0'
    apacheCommonsVersion = '2.5'
    apacheCommonsLangVersion = '3.12.0'
    modelMapperVersion = '2.4.4'
    apacheCollectionsVersion = '4.4'
    jacksonVersion = '2.13.0'
    jakartaVersion = '3.0.0'
    openfeignVersion = '3.0.3'
    redisVersion = '3.0.0'
    amqpVersion = '2.3.12'
    gsonVersion = '2.8.9'
    mockitoVersion = '4.1.0'
    mapStructVersion = '1.5.5.Final'
}


subprojects {

    group = 'br.com.felipemira'
    version = '0.0.1-SNAPSHOT'

    apply plugin: 'java'

    repositories {
        mavenCentral()
        mavenLocal()
    }

    compileJava {
        sourceCompatibility = 17
        targetCompatibility = 17
        options.encoding = 'UTF-8'
    }

    tasks.withType(JavaExec).configureEach {
        systemProperty 'file.encoding', 'UTF-8'
    }

    dependencies {
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

        testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

        implementation "org.mapstruct:mapstruct:${mapStructVersion}"


        implementation group: 'jakarta.validation', name: 'jakarta.validation-api', version: "${rootProject.ext.jakartaValidationVersion}"
        implementation group: 'jakarta.inject', name: 'jakarta.inject-api', version: "${rootProject.ext.jakartaInjectVersion}"
        implementation group: 'org.springframework', name: 'spring-context', version: "${rootProject.ext.springFrameworkVersion}"
        implementation group: 'org.springframework', name: 'spring-tx', version: "${rootProject.ext.springFrameworkVersion}"
        implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: "${rootProject.ext.springBootStarterValidationVersion}"

        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: "${rootProject.ext.junitVersion}"
        testImplementation group: 'org.junit.platform', name: 'junit-platform-commons', version: "${rootProject.ext.junitSuiteVersion}"
        testImplementation group: 'org.junit.platform', name: 'junit-platform-suite-engine', version: "${rootProject.ext.junitSuiteVersion}"
        testImplementation ('org.springframework:spring-test:' + "${rootProject.ext.springFrameworkVersion}") {
            exclude group: 'junit', module: 'org.junit.vintage'
        }
        testImplementation group: 'org.mockito', name: 'mockito-core', version: "${rootProject.ext.mockitoVersion}"

        testImplementation group: 'org.hibernate.validator', name: 'hibernate-validator', version: "${rootProject.ext.hibernateValidationVersion}"

        // Jakarta Expression Language API
        testImplementation group: 'jakarta.el', name: 'jakarta.el-api', version: "${rootProject.ext.jakartaElVersion}"

        // Implementation of Jakarta Expression Language
        testImplementation group: 'org.glassfish', name:'jakarta.el', version: "${rootProject.ext.glassfishElVersion}"
        testImplementation group: 'org.hibernate.validator', name:'hibernate-validator', version: "${rootProject.ext.hibernateValidationVersion}"
    }

    sourceSets {
        main {
            resources {
                srcDirs = ['../configuration/src/main/resources',
                           '../../configuration/src/main/resources']
            }
        }
        test {
            resources {
                srcDirs = ['../configuration/src/test/resources',
                '../../configuration/src/test/resources']
            }
        }
    }

    processResources {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
        from '../configuration/src/main/resources'
        from '../../configuration/src/main/resources'
    }

    processTestResources {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
        from '../configuration/src/test/resources'
        from '../../configuration/src/test/resources'
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
        systemProperty 'file.encoding', 'UTF-8'
    }

}